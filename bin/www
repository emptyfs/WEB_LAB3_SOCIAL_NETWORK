#!/usr/bin/env node

/**
 * Module dependencies.
 */

var fs = require('fs'); //https


var app = require('../app');
var debug = require('debug')('untitled1:server');
//var http = require('http');
var https = require('https');
var privateKey = fs.readFileSync('./domain.key', 'utf-8');
var certificate = fs.readFileSync('./domain.crt', 'utf-8');
var credentials = {key: privateKey, cert: certificate};

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = https.createServer(credentials, app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


process.on('SIGINT', () => { //сохранение книг в в файле .json
  server.close(function () { //останавливает HTTP-сервер от приема новых подключений
    let user_list = app.user_list;
    let new_user_list = {};
    //console.log(book_list);

    for (let i = 0; i < user_list.length; i++) {
      let index = user_list[i].index;
      delete user_list[i].index;
      new_user_list[index] = user_list[i];
    }
    //console.log(new_book_list);
    write_file('users.json', JSON.stringify(new_user_list));
    //write_file('library.json', JSON.stringify(app.book_list));
  });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

function write_file(file_name, message)  //запись в файл
{
  const fss = require("fs");
  fss.writeFile(file_name, message, (err) => {
    if (err)
    {
      throw err;
    }
    console.log('Users have been saved...');
  });
}
